{"version":3,"sources":["src/extra/types.ts","src/extra/utils.ts","src/extra/constants.ts"],"names":["Color","Mode","BLUE_WORDS","RED_WORDS","GRAY_WORDS","BLACK_WORDS","STARTING_SCORES","[object Object]","Blue","Red","Gray","Black","findWinner","scores","turn","winner","PROD_URL","DEV_URL"],"mappings":"IAUYA,GAAZ,SAAYA,GACVA,EAAA,QAAA,OACAA,EAAA,OAAA,MACAA,EAAA,QAAA,OACAA,EAAA,SAAA,SAJF,CAAYA,IAAAA,EAAK,SAYLC,GAAZ,SAAYA,GACVA,EAAA,UAAA,SACAA,EAAA,aAAA,YACAA,EAAA,WAAA,WAHF,CAAYA,IAAAA,EAAI,WAiIHC,EAAa,QACbC,EAAY,QACZC,EAAa,QACbC,EAAc,QAGdC,EAA0B,CACrCC,CAACP,EAAMQ,MAAON,EACdK,CAACP,EAAMS,KAAMN,EACbI,CAACP,EAAMU,MAAON,EACdG,CAACP,EAAMW,OAAQN,SC1JJO,EAAa,CAACC,EAA4BC,KACrD,IAAIC,EAAef,EAAMU,KACzB,IAAIG,IAAM,MAANA,SAAM,OAAA,EAANA,EAASb,EAAMW,UAAWN,EAAa,CACzC,GAAIS,IAASd,EAAMQ,KAAM,CACvBO,EAASf,EAAMS,SACV,GAAIK,IAASd,EAAMS,IAAK,CAC7BM,EAASf,EAAMQ,WAEZ,IAAIK,IAAM,MAANA,SAAM,OAAA,EAANA,EAASb,EAAMQ,SAAU,EAAG,CACrCO,EAASf,EAAMQ,UACV,IAAIK,IAAM,MAANA,SAAM,OAAA,EAANA,EAASb,EAAMS,QAAS,EAAG,CACpCM,EAASf,EAAMS,IAGjB,OAAOM,SCrBIC,EAAW,2DACXC,EAAU","sourcesContent":["import { Socket } from \"socket.io-client\";\n// @ts-ignore\nimport { CodenamesApp } from \"../components/codenames-app/codenames-app\";\n\n// Types\n// ------------------\n\n/**\n * Enumerator for possible cell colors.\n */\nexport enum Color {\n  Blue = \"blue\",\n  Red = \"red\",\n  Gray = \"gray\",\n  Black = \"black\"\n}\n\nexport type Team = Extract<Color, Color.Blue | Color.Red | Color.Gray>;\n\n/**\n * Possible display modes for a cell.\n */\nexport enum Mode {\n  Normal = \"normal\",\n  Spymaster = \"spymaster\",\n  Endgame = \"endgame\"\n}\n\n/**\n * Array of cell data.\n */\nexport type BoardData = CellData[];\n\n/**\n * Data to apply to a cell.\n */\nexport interface CellData {\n  word: string;\n  color?: Color;\n  mode?: Mode;\n  revealed?: boolean;\n}\n\n/**\n * Data to apply to a player.\n */\nexport interface PlayerData {\n  username?: string;\n  mode?: Mode;\n  spoiled?: boolean;\n  team?: Team;\n  connected?: boolean;\n}\n\n/**\n * Team scores.\n */\nexport type Scores = {\n  [key in Color]: number;\n};\n\n/**\n * Game data.\n */\nexport interface GameData {\n  board: BoardData;\n  players: PlayerData[];\n  scores: Scores;\n  turn: Color;\n}\n\n/**\n * Library of server utilities.\n */\nexport interface Server {\n  /**\n   * @see {@link CodenamesApp.socket}\n   */\n  socket?: Socket;\n  /**\n   * @see {@link CodenamesApp.revealCell}\n   */\n  revealCell?: (index: number) => void;\n  /**\n   * @see {@link CodenamesApp.enterRoom}\n   */\n  enterRoom?: (username: string, roomCode: string) => void;\n  /**\n   * @see {@link CodenamesApp.becomeSpymaster}\n   */\n  becomeSpymaster?: () => void;\n  /**\n   * @see {@link CodenamesApp.becomeGuesser}\n   */\n  becomeGuesser?: () => void;\n  /**\n   * @see {@link CodenamesApp.newGame}\n   */\n  newGame?: () => void;\n  /**\n   * @see {@link CodenamesApp.createRoom}\n   */\n  createRoom?: () => void;\n  /**\n   * @see {@link CodenamesApp.joinTeam}\n   */\n  joinTeam?: (color: Color) => void;\n  /**\n   * @see {@link CodenamesApp.endTurn}\n   */\n  endTurn?: () => void;\n  /**\n   * @see {@link CodenamesApp.randomizeTeams}\n   */\n  randomizeTeams?: () => void;\n  /**\n   * @see {@link CodenamesApp.leaveRoom}\n   */\n  leaveRoom?: () => void;\n}\n\nexport type Rooms = {\n  [key in string]: Room;\n};\n\nexport interface Room {\n  code: string;\n  host: string;\n  masterBoard: BoardData;\n  publicBoard: BoardData;\n  players: PlayerData[];\n  scores: Scores;\n  turn: Color;\n  currentGameId: string;\n}\n\nexport interface UnfinishedRoom {\n  code: string;\n  host: string;\n  players: PlayerData[];\n  masterBoard?: BoardData;\n  publicBoard?: BoardData;\n  scores?: Scores;\n  turn: Color;\n  currentGameId?: string;\n}\n\n// Constants\n// -----------------\n\n// Constants for how many words of each color should be used\nexport const BLUE_WORDS = 9;\nexport const RED_WORDS = 8;\nexport const GRAY_WORDS = 7;\nexport const BLACK_WORDS = 1;\n\n// Starting scores\nexport const STARTING_SCORES: Scores = {\n  [Color.Blue]: BLUE_WORDS,\n  [Color.Red]: RED_WORDS,\n  [Color.Gray]: GRAY_WORDS,\n  [Color.Black]: BLACK_WORDS\n};\n","import { BLACK_WORDS, Color, Scores, Team } from \"./types\";\n\n/**\n * Finds winner for a room.\n * @param scores\n * @param turn\n */\nexport const findWinner = (scores: Scores | undefined, turn: Color | undefined): Team => {\n  let winner: Team = Color.Gray;\n  if (scores?.[Color.Black] !== BLACK_WORDS) {\n    if (turn === Color.Blue) {\n      winner = Color.Red;\n    } else if (turn === Color.Red) {\n      winner = Color.Blue;\n    }\n  } else if (scores?.[Color.Blue] === 0) {\n    winner = Color.Blue;\n  } else if (scores?.[Color.Red] === 0) {\n    winner = Color.Red;\n  }\n\n  return winner;\n};\n","export const PROD_URL = \"https://bestdotaeu-codenames-backend.herokuapp.com\";\nexport const DEV_URL = \"http://localhost:8080\";"]}