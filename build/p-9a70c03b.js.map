{"version":3,"sources":["src/extra/types.ts"],"names":["Color","Mode"],"mappings":"IAOYA,GAAZ,SAAYA,GACVA,EAAA,QAAA,OACAA,EAAA,OAAA,MACAA,EAAA,QAAA,OACAA,EAAA,SAAA,SAJF,CAAYA,IAAAA,EAAK,SAYLC,GAAZ,SAAYA,GACVA,EAAA,UAAA,SACAA,EAAA,aAAA,YACAA,EAAA,WAAA,WAHF,CAAYA,IAAAA,EAAI","sourcesContent":["import { Socket } from \"socket.io-client\";\r\n// @ts-ignore\r\nimport { CodenamesApp } from \"../components/codenames-app/codenames-app\";\r\n\r\n/**\r\n * Enumerator for possible cell colors.\r\n */\r\nexport enum Color {\r\n  Blue = \"blue\",\r\n  Red = \"red\",\r\n  Gray = \"gray\",\r\n  Black = \"black\"\r\n}\r\n\r\nexport type Team = Extract<Color, Color.Blue | Color.Red | Color.Gray>;\r\n\r\n/**\r\n * Possible display modes for a cell.\r\n */\r\nexport enum Mode {\r\n  Normal = \"normal\",\r\n  Spymaster = \"spymaster\",\r\n  Endgame = \"endgame\"\r\n}\r\n\r\n/**\r\n * Array of cell data.\r\n */\r\nexport type BoardData = CellData[];\r\n\r\n/**\r\n * Data to apply to a cell.\r\n */\r\nexport interface CellData {\r\n  word: string;\r\n  color?: Color;\r\n  mode?: Mode;\r\n  revealed?: boolean;\r\n}\r\n\r\n/**\r\n * Data to apply to a player.\r\n */\r\nexport interface PlayerData {\r\n  username?: string;\r\n  mode?: Mode;\r\n  spoiled?: boolean;\r\n  team?: Team;\r\n  connected?: boolean;\r\n}\r\n\r\n/**\r\n * Team scores.\r\n */\r\nexport type Scores = {\r\n  [key in Color]: number;\r\n};\r\n\r\n/**\r\n * Game data.\r\n */\r\nexport interface GameData {\r\n  board: BoardData;\r\n  players: PlayerData[];\r\n  scores: Scores;\r\n  turn: Color;\r\n}\r\n\r\n/**\r\n * Library of server utilities.\r\n */\r\nexport interface Server {\r\n  /**\r\n   * @see {@link CodenamesApp.socket}\r\n   */\r\n  socket?: Socket;\r\n  /**\r\n   * @see {@link CodenamesApp.revealCell}\r\n   */\r\n  revealCell?: (index: number) => void;\r\n  /**\r\n   * @see {@link CodenamesApp.enterRoom}\r\n   */\r\n  enterRoom?: (username: string, roomCode: string) => void;\r\n  /**\r\n   * @see {@link CodenamesApp.becomeSpymaster}\r\n   */\r\n  becomeSpymaster?: () => void;\r\n  /**\r\n   * @see {@link CodenamesApp.becomeGuesser}\r\n   */\r\n  becomeGuesser?: () => void;\r\n  /**\r\n   * @see {@link CodenamesApp.newGame}\r\n   */\r\n  newGame?: () => void;\r\n  /**\r\n   * @see {@link CodenamesApp.createRoom}\r\n   */\r\n  createRoom?: () => void;\r\n  /**\r\n   * @see {@link CodenamesApp.joinTeam}\r\n   */\r\n  joinTeam?: (color: Color) => void;\r\n  /**\r\n   * @see {@link CodenamesApp.endTurn}\r\n   */\r\n  endTurn?: () => void;\r\n  /**\r\n   * @see {@link CodenamesApp.randomizeTeams}\r\n   */\r\n  randomizeTeams?: () => void;\r\n}\r\n\r\nexport type Rooms = {\r\n  [key in string]: Room;\r\n};\r\n\r\nexport interface Room {\r\n  code: string;\r\n  host: string;\r\n  masterBoard: BoardData;\r\n  publicBoard: BoardData;\r\n  players: PlayerData[];\r\n  scores: Scores;\r\n  turn: Color;\r\n  currentGameId: string;\r\n}\r\n\r\nexport interface UnfinishedRoom {\r\n  code: string;\r\n  host: string;\r\n  players: PlayerData[];\r\n  masterBoard?: BoardData;\r\n  publicBoard?: BoardData;\r\n  scores?: Scores;\r\n  turn: Color;\r\n  currentGameId?: string;\r\n}\r\n"]}