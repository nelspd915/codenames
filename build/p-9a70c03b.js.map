{"version":3,"sources":["src/extra/types.ts"],"names":["Color","Mode"],"mappings":"IAMYA,GAAZ,SAAYA,GACVA,EAAA,QAAA,OACAA,EAAA,OAAA,MACAA,EAAA,QAAA,OACAA,EAAA,SAAA,SAJF,CAAYA,IAAAA,EAAK,SAYLC,GAAZ,SAAYA,GACVA,EAAA,UAAA,SACAA,EAAA,aAAA,YACAA,EAAA,WAAA,WAHF,CAAYA,IAAAA,EAAI","sourcesContent":["// @ts-ignore\nimport { CodenamesApp } from \"../components/codenames-app/codenames-app\";\n\n/**\n * Enumerator for possible cell colors.\n */\nexport enum Color {\n  Blue = \"blue\",\n  Red = \"red\",\n  Gray = \"gray\",\n  Black = \"black\"\n}\n\nexport type Team = Extract<Color, Color.Blue | Color.Red>;\n\n/**\n * Possible display modes for a cell.\n */\nexport enum Mode {\n  Normal = \"normal\",\n  Spymaster = \"spymaster\",\n  Endgame = \"endgame\"\n}\n\n/**\n * Array of cell data.\n */\nexport type BoardData = CellData[];\n\n/**\n * Data to apply to a cell.\n */\nexport interface CellData {\n  word: string;\n  color?: Color;\n  mode?: Mode;\n  revealed?: boolean;\n}\n\n/**\n * Data to apply to a player.\n */\nexport interface PlayerData {\n  username?: string;\n  mode?: Mode;\n  spoiled?: boolean;\n  team?: Team;\n}\n\n/**\n * Team scores.\n */\nexport type Scores = {\n  [key in Color]: number;\n};\n\n/**\n * Game data.\n */\nexport interface GameData {\n  board: BoardData;\n  players: PlayerData[];\n  scores: Scores;\n  turn: Color;\n}\n\n/**\n * Library of requests that can be made to the server.\n */\nexport interface Requests {\n  /**\n   * @see {@link CodenamesApp.revealCell}\n   */\n  revealCell?: (index: number) => void;\n  /**\n   * @see {@link CodenamesApp.enterRoom}\n   */\n  enterRoom?: (username: string, roomCode: string) => void;\n  /**\n   * @see {@link CodenamesApp.becomeSpymaster}\n   */\n  becomeSpymaster?: () => void;\n  /**\n   * @see {@link CodenamesApp.becomeGuesser}\n   */\n  becomeGuesser?: () => void;\n  /**\n   * @see {@link CodenamesApp.newGame}\n   */\n  newGame?: () => void;\n  /**\n   * @see {@link CodenamesApp.createRoom}\n   */\n  createRoom?: () => void;\n  /**\n   * @see {@link CodenamesApp.joinTeam}\n   */\n  joinTeam?: (color: Color) => void;\n  /**\n   * @see {@link CodenamesApp.endTurn}\n   */\n  endTurn?: () => void;\n}\n\nexport type Rooms = {\n  [key in string]: Room;\n};\n\nexport interface Room {\n  code: string;\n  host: string;\n  masterBoard: BoardData;\n  publicBoard: BoardData;\n  players: PlayerData[];\n  scores: Scores;\n  turn: Color;\n}\n\nexport interface UnfinishedRoom {\n  code: string;\n  host: string;\n  players: PlayerData[];\n  masterBoard?: BoardData;\n  publicBoard?: BoardData;\n  scores?: Scores;\n  turn: Color;\n}\n"]}