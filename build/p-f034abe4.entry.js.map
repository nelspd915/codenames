{"version":3,"sources":["src/components/codenames-board/codenames-board.scss?tag=codenames-board&encapsulation=shadow","src/components/codenames-board/codenames-board.tsx","src/extra/types.ts","src/components/codenames-cell/codenames-cell.scss?tag=codenames-cell&encapsulation=shadow","src/components/codenames-cell/codenames-cell.tsx"],"names":["codenamesBoardCss","CodenamesBoard","[object Object]","h","Host","_b","_a","this","cellData","map","eachCellData","word","color","mode","revealed","CellColor","CellMode","codenamesCellCss","CodenamesCell","hostRef","Gray","Normal","class","toUpperCase"],"mappings":"kDAAA,MAAMA,EAAoB,kGCQbC,EAAc,+BAWzBC,iBACE,OACEC,EAACC,EAAI,MACFC,GAAAC,EAAAC,KAAKC,YAAQ,MAAAF,SAAA,OAAA,EAAAA,EAAEG,KAAKC,GAEjBP,EAAA,iBAAA,CACEQ,KAAMD,EAAaC,KACnBC,MAAOF,EAAaE,MACpBC,KAAMH,EAAaG,KACnBC,SAAUJ,EAAaI,gBAG3B,MAAAT,SAAA,EAAAA,EAAI,kBCvBd,IAAYU,GAAZ,SAAYA,GACVA,EAAA,QAAA,OACAA,EAAA,OAAA,MACAA,EAAA,QAAA,OACAA,EAAA,SAAA,SAJF,CAAYA,IAAAA,EAAS,KAUrB,IAAYC,GAAZ,SAAYA,GACVA,EAAA,UAAA,SACAA,EAAA,aAAA,YACAA,EAAA,WAAA,WAHF,CAAYA,IAAAA,EAAQ,KClBpB,MAAMC,EAAmB,wvBCQZC,EAAa,MAL1BhB,YAAAiB,aASUZ,KAAAI,KAAe,GAKfJ,KAAAK,MAAmBG,EAAUK,KAK7Bb,KAAAM,KAAiBG,EAASK,OAK1Bd,KAAAO,SAAoB,MAK5BZ,SACE,OAAOC,EAAA,MAAA,CAAKmB,MAAO,GAAGf,KAAKK,SAASL,KAAKM,QAAQN,KAAKO,SAAW,WAAa,MAC5EX,EAAA,OAAA,CAAMmB,MAAO,QAASf,KAAKI,KAAKY","sourcesContent":[":host {\n  display: flex;\n  margin: 50px;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  height: 600px;\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { CellData } from \"../../extra/types\";\n\n@Component({\n  tag: 'codenames-board',\n  styleUrl: 'codenames-board.scss',\n  shadow: true,\n})\nexport class CodenamesBoard {\n\n  /**\n   * Data list used to generate the cells.\n   * @length 25\n   */\n  @Prop() cellData?: CellData;\n\n  /**\n   * Stencil lifecycle method `render` for `codenames-board` component.\n   */\n  render() {\n    return (\n      <Host>\n        {this.cellData?.map((eachCellData) => {\n          return (\n            <codenames-cell\n              word={eachCellData.word}\n              color={eachCellData.color}\n              mode={eachCellData.mode}\n              revealed={eachCellData.revealed}\n            ></codenames-cell>\n          )\n        }) ?? null}\n      </Host>\n    );\n  }\n\n}\n","/**\n * Array of cell data.\n */\nexport type CellData = SingleCellData[];\n\n/**\n * Enumerator for possible cell colors.\n */\nexport enum CellColor {\n  Blue = \"blue\",\n  Red = \"red\",\n  Gray = \"gray\",\n  Black = \"black\"\n}\n\n/**\n * Possible display modes for a cell.\n */\nexport enum CellMode {\n  Normal = \"normal\",\n  Spymaster = \"spymaster\",\n  Endgame = \"endgame\"\n}\n\n/**\n * Data to apply to a cell.\n */\nexport interface SingleCellData {\n  word: string,\n  color: CellColor,\n  mode: CellMode,\n  revealed: boolean\n}",":host {\n  width: 18%;\n  height: 17%;\n}\n\ndiv {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  font-family: Roboto, verdana, sans-serif;\n  font-size: 15pt;\n  background: #e8e8e8;\n}\n\n.blue {\n  &.spymaster {\n    color: #4183cc;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #4183cc;\n    color: #ffffff;\n  }\n\n  &.endgame {\n    background: #a6c7ee;\n  }\n}\n\n.red {\n  &.spymaster {\n    color: #d13030;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #d13030;\n    color: #ffffff;\n  }\n\n  &.endgame {\n    background: #ecabab;\n  }\n}\n\n.gray {\n  &.spymaster {\n    color: #000000;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #8e8e8e;\n    color: #ffffff;\n  }\n}\n\n.black {\n  &.spymaster {\n    background: #999999;\n    outline: 5px solid #000000;\n    font-weight: bold;\n  }\n\n  &.revealed, &.endgame {\n    background: #000000;\n    color: #ffffff;\n    outline: 0;\n  }\n}\n\n.word {\n  vertical-align: middle;\n  display: inline-block;\n}","import { Component, Prop, h } from \"@stencil/core\";\nimport { CellColor, CellMode } from \"../../extra/types\";\n\n@Component({\n  tag: \"codenames-cell\",\n  styleUrl: \"codenames-cell.scss\",\n  shadow: true,\n})\nexport class CodenamesCell {\n  /**\n   * Word shown in cell.\n   */\n  @Prop() word: string = \"\";\n\n  /**\n   * Cell color.\n   */\n  @Prop() color: CellColor = CellColor.Gray;\n\n  /**\n   * Cell display mode.\n   */\n  @Prop() mode: CellMode = CellMode.Normal;\n\n  /**\n   * Whether the cell is revealed.\n   */\n  @Prop() revealed: boolean = false;\n\n  /**\n   * Stencil lifecycle method `render` for `codenames-cell` component.\n   */\n  render() {\n    return <div class={`${this.color} ${this.mode} ${this.revealed ? \"revealed\" : \"\"}`}>\n      <span class={\"word\"}>{this.word.toUpperCase()}</span>\n    </div>;\n  }\n}\n"]}