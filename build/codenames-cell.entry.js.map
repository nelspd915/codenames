{"file":"codenames-cell.entry.esm.js","mappings":";;;AAAA,MAAM,gBAAgB,GAAG,qwBAAqwB;;MCQjxB,aAAa;EAL1B;;;;;;IAcU,SAAI,GAAW,EAAE,CAAC;;;;IAKlB,UAAK,GAAe,SAAS,CAAC,IAAI,CAAC;;;;IAKnC,SAAI,GAAc,QAAQ,CAAC,MAAM,CAAC;;;;IAKlC,aAAQ,GAAa,KAAK,CAAC;;;;IAalB,gBAAW,GAAY,KAAK,CAAC;;;;IA2BtC,qBAAgB,GAAG;MACzB,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE;QAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;OACjC;KACF,CAAA;GACF;;;;EAxCC,eAAe;IACb,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;GAC1B;;;;EAeD,MAAM;IACJ,QACE,WACE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAE,EACtE,OAAO,EAAE,IAAI,CAAC,gBAAgB,IAE7B,IAAI,CAAC,WAAW;MACf,4BAAuC;MACvC,gBAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAQ,CAEpC,EACN;GACH;;;;;;;;;","names":[],"sources":["./src/components/codenames-cell/codenames-cell.scss?tag=codenames-cell&encapsulation=shadow","./src/components/codenames-cell/codenames-cell.tsx"],"sourcesContent":[":host {\r\n  width: 18%;\r\n  height: 17%;\r\n}\r\n\r\ndiv {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  font-family: Roboto, verdana, sans-serif;\r\n  font-size: 15pt;\r\n  background: #e8e8e8;\r\n  cursor: pointer;\r\n  &.revealed, &.spymaster, &.endgame {\r\n    cursor: default;\r\n  }\r\n}\r\n\r\n.blue {\r\n  &.spymaster {\r\n    color: #4183cc;\r\n    font-weight: bold;\r\n  }\r\n\r\n  &.revealed {\r\n    background: #4183cc;\r\n    color: #ffffff;\r\n  }\r\n\r\n  &.endgame {\r\n    background: #a6c7ee;\r\n  }\r\n}\r\n\r\n.red {\r\n  &.spymaster {\r\n    color: #d13030;\r\n    font-weight: bold;\r\n  }\r\n\r\n  &.revealed {\r\n    background: #d13030;\r\n    color: #ffffff;\r\n  }\r\n\r\n  &.endgame {\r\n    background: #ecabab;\r\n  }\r\n}\r\n\r\n.gray {\r\n  &.spymaster {\r\n    color: #000000;\r\n    font-weight: bold;\r\n  }\r\n\r\n  &.revealed {\r\n    background: #8e8e8e;\r\n    color: #ffffff;\r\n  }\r\n}\r\n\r\n.black {\r\n  &.spymaster {\r\n    background: #999999;\r\n    outline: 5px solid #000000;\r\n    font-weight: bold;\r\n  }\r\n\r\n  &.revealed, &.endgame {\r\n    background: #000000;\r\n    color: #ffffff;\r\n    outline: 0;\r\n  }\r\n}\r\n","import { Component, Prop, h, State, Event, EventEmitter, Watch } from \"@stencil/core\";\r\nimport { CellColor, CellMode } from \"../../extra/types\";\r\n\r\n@Component({\r\n  tag: \"codenames-cell\",\r\n  styleUrl: \"codenames-cell.scss\",\r\n  shadow: true,\r\n})\r\nexport class CodenamesCell {\r\n  /**\r\n   * Index of the cell.\r\n   */\r\n  @Prop() index: number;\r\n\r\n  /**\r\n   * Word shown in cell.\r\n   */\r\n  @Prop() word: string = \"\";\r\n\r\n  /**\r\n   * Cell color.\r\n   */\r\n  @Prop() color?: CellColor = CellColor.Gray;\r\n\r\n  /**\r\n   * Cell display mode.\r\n   */\r\n  @Prop() mode?: CellMode = CellMode.Normal;\r\n\r\n  /**\r\n   * Whether the cell is revealed.\r\n   */\r\n  @Prop() revealed?: boolean = false;\r\n\r\n  /**\r\n   * Watcher for `revealed` prop.\r\n   */\r\n  @Watch(\"revealed\")\r\n  revealedChanged(): void {\r\n    this.showSpinner = false;\r\n  }\r\n\r\n  /**\r\n   * Whether to show loading spinner.\r\n   */\r\n  @State() private showSpinner: boolean = false;\r\n\r\n  /**\r\n   * Event fired upon clicking a cell to reveal it.\r\n   */\r\n  @Event({ bubbles: true }) revealCell: EventEmitter<number>;\r\n\r\n  /**\r\n   * Stencil lifecycle method `render` for `codenames-cell` component.\r\n   */\r\n  render(): void {\r\n    return (\r\n      <div\r\n        class={`${this.color} ${this.mode} ${this.revealed ? \"revealed\" : \"\"}`}\r\n        onClick={this.handleRevealCell}\r\n      >\r\n        {this.showSpinner ?\r\n          <codenames-spinner></codenames-spinner> :\r\n          <span>{this.word.toUpperCase()}</span>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sends request to reveal this cell on the board.\r\n   */\r\n  private handleRevealCell = async (): Promise<void> => {\r\n    if (this.mode === CellMode.Normal && this.revealed === false) {\r\n      this.showSpinner = true;\r\n      this.revealCell.emit(this.index)\r\n    }\r\n  }\r\n}\r\n"],"version":3}