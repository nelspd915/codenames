{"file":"codenames-cell.entry.esm.js","mappings":";;;AAAA,MAAM,gBAAgB,GAAG,qwBAAqwB;;MCQjxB,aAAa;EAL1B;;;;;;IAcU,SAAI,GAAW,EAAE,CAAC;;;;IAKlB,UAAK,GAAe,SAAS,CAAC,IAAI,CAAC;;;;IAKnC,SAAI,GAAc,QAAQ,CAAC,MAAM,CAAC;;;;IAKlC,aAAQ,GAAa,KAAK,CAAC;;;;IAalB,gBAAW,GAAY,KAAK,CAAC;;;;IA2BtC,qBAAgB,GAAG;MACzB,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE;QAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;OACjC;KACF,CAAA;GACF;;;;EAxCC,eAAe;IACb,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;GAC1B;;;;EAeD,MAAM;IACJ,QACE,WACE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAE,EACtE,OAAO,EAAE,IAAI,CAAC,gBAAgB,IAE7B,IAAI,CAAC,WAAW;MACf,4BAAuC;MACvC,gBAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAQ,CAEpC,EACN;GACH;;;;;;;;;","names":[],"sources":["./src/components/codenames-cell/codenames-cell.scss?tag=codenames-cell&encapsulation=shadow","./src/components/codenames-cell/codenames-cell.tsx"],"sourcesContent":[":host {\n  width: 18%;\n  height: 17%;\n}\n\ndiv {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  font-family: Roboto, verdana, sans-serif;\n  font-size: 15pt;\n  background: #e8e8e8;\n  cursor: pointer;\n  &.revealed, &.spymaster, &.endgame {\n    cursor: default;\n  }\n}\n\n.blue {\n  &.spymaster {\n    color: #4183cc;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #4183cc;\n    color: #ffffff;\n  }\n\n  &.endgame {\n    background: #a6c7ee;\n  }\n}\n\n.red {\n  &.spymaster {\n    color: #d13030;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #d13030;\n    color: #ffffff;\n  }\n\n  &.endgame {\n    background: #ecabab;\n  }\n}\n\n.gray {\n  &.spymaster {\n    color: #000000;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #8e8e8e;\n    color: #ffffff;\n  }\n}\n\n.black {\n  &.spymaster {\n    background: #999999;\n    outline: 5px solid #000000;\n    font-weight: bold;\n  }\n\n  &.revealed, &.endgame {\n    background: #000000;\n    color: #ffffff;\n    outline: 0;\n  }\n}\n","import { Component, Prop, h, State, Event, EventEmitter, Watch } from \"@stencil/core\";\nimport { CellColor, CellMode } from \"../../extra/types\";\n\n@Component({\n  tag: \"codenames-cell\",\n  styleUrl: \"codenames-cell.scss\",\n  shadow: true,\n})\nexport class CodenamesCell {\n  /**\n   * Index of the cell.\n   */\n  @Prop() index: number;\n\n  /**\n   * Word shown in cell.\n   */\n  @Prop() word: string = \"\";\n\n  /**\n   * Cell color.\n   */\n  @Prop() color?: CellColor = CellColor.Gray;\n\n  /**\n   * Cell display mode.\n   */\n  @Prop() mode?: CellMode = CellMode.Normal;\n\n  /**\n   * Whether the cell is revealed.\n   */\n  @Prop() revealed?: boolean = false;\n\n  /**\n   * Watcher for `revealed` prop.\n   */\n  @Watch(\"revealed\")\n  revealedChanged(): void {\n    this.showSpinner = false;\n  }\n\n  /**\n   * Whether to show loading spinner.\n   */\n  @State() private showSpinner: boolean = false;\n\n  /**\n   * Event fired upon clicking a cell to reveal it.\n   */\n  @Event({ bubbles: true }) revealCell: EventEmitter<number>;\n\n  /**\n   * Stencil lifecycle method `render` for `codenames-cell` component.\n   */\n  render(): void {\n    return (\n      <div\n        class={`${this.color} ${this.mode} ${this.revealed ? \"revealed\" : \"\"}`}\n        onClick={this.handleRevealCell}\n      >\n        {this.showSpinner ?\n          <codenames-spinner></codenames-spinner> :\n          <span>{this.word.toUpperCase()}</span>\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Sends request to reveal this cell on the board.\n   */\n  private handleRevealCell = async (): Promise<void> => {\n    if (this.mode === CellMode.Normal && this.revealed === false) {\n      this.showSpinner = true;\n      this.revealCell.emit(this.index)\n    }\n  }\n}\n"],"version":3}