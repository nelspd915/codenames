{"file":"codenames-cell.entry.esm.js","mappings":";;AAKA;;;AAGA,IAAY,SAKX;AALD,WAAY,SAAS;EACnB,0BAAa,CAAA;EACb,wBAAW,CAAA;EACX,0BAAa,CAAA;EACb,4BAAe,CAAA;AACjB,CAAC,EALW,SAAS,KAAT,SAAS,QAKpB;AAED;;;AAGA,IAAY,QAIX;AAJD,WAAY,QAAQ;EAClB,6BAAiB,CAAA;EACjB,mCAAuB,CAAA;EACvB,+BAAmB,CAAA;AACrB,CAAC,EAJW,QAAQ,KAAR,QAAQ;;AClBpB,MAAM,gBAAgB,GAAG,qwBAAqwB;;MCQjxB,aAAa;EAL1B;;;;;IASU,SAAI,GAAW,EAAE,CAAC;;;;IAKlB,UAAK,GAAc,SAAS,CAAC,IAAI,CAAC;;;;IAKlC,SAAI,GAAa,QAAQ,CAAC,MAAM,CAAC;;;;IAKjC,aAAQ,GAAY,KAAK,CAAC;;;;IAKjB,gBAAW,GAAY,KAAK,CAAC;;;;IAsBtC,eAAU,GAAG;MACnB,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE;QAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;;QAExB,UAAU,CAAC;UACT,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;UACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACtB,EAAE,GAAG,CAAC,CAAC;OACT;KACF,CAAA;GACF;;;;EA3BC,MAAM;IACJ,QACE,WACE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAE,EACtE,OAAO,EAAE,IAAI,CAAC,UAAU,IAEvB,IAAI,CAAC,WAAW;MACf,4BAAuC;MACvC,gBAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAQ,CAEpC,EACN;GACH;;;;;;","names":[],"sources":["./src/extra/types.ts","./src/components/codenames-cell/codenames-cell.scss?tag=codenames-cell&encapsulation=shadow","./src/components/codenames-cell/codenames-cell.tsx"],"sourcesContent":["/**\n * Array of cell data.\n */\nexport type CellData = SingleCellData[];\n\n/**\n * Enumerator for possible cell colors.\n */\nexport enum CellColor {\n  Blue = \"blue\",\n  Red = \"red\",\n  Gray = \"gray\",\n  Black = \"black\"\n}\n\n/**\n * Possible display modes for a cell.\n */\nexport enum CellMode {\n  Normal = \"normal\",\n  Spymaster = \"spymaster\",\n  Endgame = \"endgame\"\n}\n\n/**\n * Data to apply to a cell.\n */\nexport interface SingleCellData {\n  word: string,\n  color: CellColor,\n  mode: CellMode,\n  revealed: boolean\n}",":host {\n  width: 18%;\n  height: 17%;\n}\n\ndiv {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  font-family: Roboto, verdana, sans-serif;\n  font-size: 15pt;\n  background: #e8e8e8;\n  cursor: pointer;\n  &.revealed, &.spymaster, &.endgame {\n    cursor: default;\n  }\n}\n\n.blue {\n  &.spymaster {\n    color: #4183cc;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #4183cc;\n    color: #ffffff;\n  }\n\n  &.endgame {\n    background: #a6c7ee;\n  }\n}\n\n.red {\n  &.spymaster {\n    color: #d13030;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #d13030;\n    color: #ffffff;\n  }\n\n  &.endgame {\n    background: #ecabab;\n  }\n}\n\n.gray {\n  &.spymaster {\n    color: #000000;\n    font-weight: bold;\n  }\n\n  &.revealed {\n    background: #8e8e8e;\n    color: #ffffff;\n  }\n}\n\n.black {\n  &.spymaster {\n    background: #999999;\n    outline: 5px solid #000000;\n    font-weight: bold;\n  }\n\n  &.revealed, &.endgame {\n    background: #000000;\n    color: #ffffff;\n    outline: 0;\n  }\n}\n","import { Component, Prop, h, State } from \"@stencil/core\";\nimport { CellColor, CellMode } from \"../../extra/types\";\n\n@Component({\n  tag: \"codenames-cell\",\n  styleUrl: \"codenames-cell.scss\",\n  shadow: true,\n})\nexport class CodenamesCell {\n  /**\n   * Word shown in cell.\n   */\n  @Prop() word: string = \"\";\n\n  /**\n   * Cell color.\n   */\n  @Prop() color: CellColor = CellColor.Gray;\n\n  /**\n   * Cell display mode.\n   */\n  @Prop() mode: CellMode = CellMode.Normal;\n\n  /**\n   * Whether the cell is revealed.\n   */\n  @Prop() revealed: boolean = false;\n\n  /**\n   * Whether to show loading spinner.\n   */\n  @State() private showSpinner: boolean = false;\n\n  /**\n   * Stencil lifecycle method `render` for `codenames-cell` component.\n   */\n  render(): void {\n    return (\n      <div\n        class={`${this.color} ${this.mode} ${this.revealed ? \"revealed\" : \"\"}`}\n        onClick={this.revealCell}\n      >\n        {this.showSpinner ?\n          <codenames-spinner></codenames-spinner> :\n          <span>{this.word.toUpperCase()}</span>\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Sends request to reveal this cell on the board.\n   */\n  private revealCell = async (): Promise<void> => {\n    if (this.mode === CellMode.Normal && this.revealed === false) {\n      this.showSpinner = true;\n      // TODO: emit reveal event instead of setting own prop\n      setTimeout(() => {\n        this.showSpinner = false;\n        this.revealed = true;\n      }, 500);\n    }\n  }\n}\n"],"version":3}